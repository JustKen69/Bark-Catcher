#include <SD.h>
#include <Wire.h>
#include <RTClib.h>
#include <WiFiNINA.h>
#include <WiFiUdp.h>

// WiFi network credentials
char ssid[] = "your_SSID";
char password[] = "your_PASSWORD";

// Notion API credentials
char notionAPIKey[] = "your_NOTION_API_KEY";
char databaseID[] = "your_DATABASE_ID";

// Pins for the sound sensor module and SD card module
const int soundSensorPin = A0;
const int chipSelectPin = 4;

// Variables for the real-time clock module
RTC_DS1307 rtc;

// Variables for WiFi connection
WiFiClient client;
WiFiUDP ntpUDP;
unsigned int localPort = 2390;
IPAddress timeServerIP;
const char* timeServerName = "time.nist.gov";
const int timeZoneOffset = -4 * 60 * 60; // Eastern Standard Time (EST)

// Variables for Notion API connection
char notionHost[] = "api.notion.com";
char notionPath[] = "/v1/databases/";
char notionContentType[] = "application/json";
char notionDatabaseURL[200];

// Variables for data collection
unsigned long currentTime;
unsigned long lastUploadTime;
int noiseLevel;

// Initialize the SD card
void setupSDCard() {
  Serial.print("Initializing SD card...");
  if (!SD.begin(chipSelectPin)) {
    Serial.println("SD card initialization failed!");
    return;
  }
  Serial.println("SD card initialized successfully.");
}

// Initialize the real-time clock module
void setupRTC() {
  if (! rtc.begin()) {
    Serial.println("RTC initialization failed!");
    return;
  }
  if (! rtc.isrunning()) {
    Serial.println("RTC is not running!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
}

// Initialize the WiFi connection
void setupWiFi() {
  Serial.print("Connecting to WiFi...");
  while (WiFi.begin(ssid, password) != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("WiFi connected successfully.");
}

// Initialize the Notion API connection
void setupNotion() {
  Serial.print("Connecting to Notion API...");
  client.connect(notionHost, 443);
  sprintf(notionDatabaseURL, "%s%s", notionPath, databaseID);
  lastUploadTime = 0;
  Serial.println("Notion API connected successfully.");
}

// Get the current time from the real-time clock module
unsigned long getCurrentTime() {
  DateTime now = rtc.now();
  return now.unixtime();
}

// Get the current time from the NTP server
unsigned long getNTPTime() {
  while (ntpUDP.parsePacket() > 0) ;
  Serial.print("Getting NTP time...");
  if (WiFi.hostByName(timeServerName, timeServerIP)) {
    Serial.println("NTP time received.");
    byte packetBuffer[48];
    memset(packetBuffer, 0, sizeof(packetBuffer));
    packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    packetBuffer[1] = 0;     // Stratum, or type of clock
    packetBuffer[2] = 6;     // Polling Interval
    packetBuffer[3] = 0xEC;  // Peer Clock Precision
    packetBuffer[12]  = 49;
    packetBuffer[13]  = 0x4E;
    packetBuffer[14]  = 49;
    packetBuffer[15]  = 52;
    ntpUDP.beginPacket(timeServerIP, 123);
    ntpUDP.write(packetBuffer, sizeof(packetBuffer));
    ntpUDP.endPacket();
    delay(1000);
    if (ntpUDP.parsePacket() == 0) {
      Serial.println("No NTP packet received.");
      return 0;
    }
    ntpUDP.read(packetBuffer, sizeof(packetBuffer));
    unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
    unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
    unsigned long secsSince1900 = highWord << 16 | lowWord;
    unsigned long epoch = secsSince1900 - 2208988800UL + timeZoneOffset;
    return epoch;
  } else {
    Serial.println("Could not resolve NTP server.");
    return 0;
  }
}

// Get the current date and time as a string
String getCurrentTimeString() {
  DateTime now = rtc.now();
  String timeString = String(now.year(), DEC) + "-" + String(now.month(), DEC) + "-" + String(now.day(), DEC) + " " + String(now.hour(), DEC) + ":" + String(now.minute(), DEC) + ":" + String(now.second(), DEC);
  return timeString;
}

// Record the noise level and time stamp to the SD card
void recordData() {
  File dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (dataFile) {
    dataFile.print(getCurrentTimeString());
    dataFile.print(",");
    dataFile.println(noiseLevel);
    dataFile.close();
    Serial.println("Data recorded to SD card.");
  } else {
    Serial.println("Error opening datalog.txt.");
  }
}

// Upload the data to the Notion database
void uploadData() {
  String dateString = getCurrentTimeString().substring(0, 10);
  String notionRequestBody = "{\"properties\": {\"Date\": {\"title\": [{\"text\": {\"content\": \"" + dateString + "\"}}]}, \"Noise Level\": {\"number\": " + String(noiseLevel) + "}}}";
  int contentLength = notionRequestBody.length();
  char notionContentLength[8];
  itoa(contentLength, notionContentLength, 10);
  char notionAuthorization[50];
  sprintf(notionAuthorization, "Bearer %s", notionAPIKey);
  if (client.connect(notionHost, 443)) {
    client.print("POST ");
    client.print(notionDatabaseURL);
    client.println("/pages");
    client.println("Host: api.notion.com");
    client.println("Connection: close");
    client.println("Notion-Version: 2022-01-20");
    client.println("Content-Type: " + String(notionContentType));
    client.println("Content-Length: " + String(contentLength));
    client.println("Authorization: " + String(notionAuthorization));
    client.println();
    client.println(notionRequestBody);
    Serial.println("Data uploaded to Notion.");
  } else {
    Serial.println("Notion API connection failed.");
  }
}

void setup() {
  Serial.begin(9600);
  setupSDCard();
  setupRTC();
  setupWiFi();
  setupNotion();
}

void loop() {
  currentTime = getCurrentTime();
  if (currentTime % 86400 == 0 && currentTime != lastUploadTime
) {
lastUploadTime = currentTime;
uploadData();
}
noiseLevel = analogRead(A0);
recordData();
delay(1000);
}
